generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  goals           Goal[]
  mentalEntries   MentalEntry[]
  physicalEntries PhysicalEntry[]
  profile         Profile?
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  age       Int
  gender    String
  height    Float
  weight    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String
  category     String
  targetValue  Float
  currentValue Float
  unit         String
  targetDate   DateTime
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed])
}

model PhysicalEntry {
  id                     String   @id @default(cuid())
  userId                 String
  date                   DateTime
  heartRate              Int?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  weight                 Float?
  sleepHours             Float?
  sleepQuality           Int?
  exerciseMinutes        Int?
  exerciseType           String?
  exerciseIntensity      String?
  steps                  Int?
  waterIntake            Float?
  notes                  String?
  createdAt              DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model MentalEntry {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime
  mood              Int?
  stressLevel       Int?
  anxietyLevel      Int?
  energyLevel       Int?
  meditationMinutes Int?
  journalingDone    Boolean?
  socialConnection  Int?
  gratitudePractice Boolean?
  notes             String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}
